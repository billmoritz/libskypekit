{"name":"Libskypekit","body":"![logo](http://blog.railsware.com/wp-content/uploads/2012/05/libskypekit.png)\r\n\r\n## Libskypekit\r\n\r\nLibskypekit is thread-safe C library that provides *synchronous* SkypeKit API for *asynchronous* C++ SkypeKit SDK.\r\n\r\n## Description\r\n\r\nThe goal of Libskypekit is catch all asynchronous callbacks of SkypeKit SDK and push they as events into one queue.\r\n\r\nThen regular synchronous application can pull queue, retrieve each event and do own business logic.\r\n\r\nCurrently implemented events:\r\n\r\n* Account status changed\r\n* Chat message received\r\n\r\n## Memory management\r\n\r\nFor each new event Libskypekit dynamically allocates memory for event structure and for event data and then push event into internal events queue. The queue size is only limited by size of operating system available memory.\r\nSo after processing certain event you are responsible to free event memory otherwise you will have memory leak. See corresponding API call.\r\n\r\n## Dependencies\r\n\r\n* SkypeKit SDK 4.x.x\r\n\r\n## Building\r\n\r\n**Note.** Before build libskypekit you must obtain, unpack and compile SkypeKit SDK first!\r\n\r\n    $ git clone git@github.com:railsware/libskypekit.git\r\n    $ cd libskypekit   \r\n    $ DEBUG=1 SKYPEKIT_SDK=path/to/compliled/sdk ./build.sh\r\n\r\n`DEBUG=1` is optional but gives your opportunity to see what is going in library.\r\n\r\n## Issues on x86_64\r\n\r\nWhen you have error like:\r\n\r\n    relocation R_X86_64_32S against `vtable for SEClientSession' can not be used when making a shared object; recompile with -fPIC\r\n\r\nTry to recompile SDK with `-fPIC` :\r\n\r\n    export CC=\"gcc -fPIC\"\r\n    export CXX=\"g++ -fPIC\"\r\n    ./BuildWithCmake.sh\r\n\r\n## Installation\r\n\r\nTo install bin, include, lib files into `/usr/local` just type:\r\n\r\n    $ sudo ./install.sh\r\n\r\nProbably it's better to create package for your OS and install it via package manager.\r\n\r\n## API\r\n\r\nSee [skypekit.h](https://github.com/railsware/libskypekit/blob/master/include/skypekit.h)\r\n\r\n## Examples\r\n\r\nIn `examples` directory you may find out how you may use libevent.\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <signal.h>\r\n\r\n#include \"skypekit.h\"\r\n\r\nstatic struct SkypekitSkype* skype;\r\n\r\nvoid terminate() {\r\n  printf(\"Terminating skype ...\\n\");\r\n\r\n  skypekit_skype_stop(skype);\r\n  skypekit_skype_free(skype);\r\n\r\n  exit(0);\r\n}\r\n\r\nvoid check_error(skypekit_error_t error) {\r\n  if (error != SKYPEKIT_OK) {\r\n    printf(\"Error: %d\\n\", error);\r\n    exit(0);\r\n  }\r\n}\r\n\r\nint main(int argc, char** argv) {\r\n  struct SkypekitEvent* event;\r\n  struct SkypekitAccountStatusData* account_status_data;\r\n  struct SkypekitChatMessageData* chat_message_data;\r\n\r\n  const char* keyfile;\r\n  const char* host;\r\n  int port;\r\n  const char* skypename;\r\n  const char* password;\r\n\r\n  if (argc < 6)\r\n  {\r\n    printf(\"usage: %s <keyfile> <host> <port> <skypename> <password>\\n\", argv[0]);\r\n    return 1;\r\n  };\r\n\r\n  keyfile = argv[1];\r\n  host = argv[2];\r\n  port = atoi(argv[3]);\r\n  skypename = argv[4];\r\n  password = argv[5];\r\n\r\n  skype = skypekit_skype_new();\r\n\r\n  signal(SIGINT, terminate);\r\n\r\n  printf(\"Initializing skype ...\\n\");\r\n  skypekit_skype_init(skype, keyfile, host, port, NULL);\r\n\r\n  printf(\"Start skype ...\\n\");\r\n  check_error(skypekit_skype_start(skype));\r\n\r\n  printf(\"Log in to skype ...\\n\");\r\n  check_error(skypekit_skype_login(skype, skypename, password));\r\n\r\n  printf(\"Start loop ...\\n\");\r\n\r\n  while(1) {\r\n    event = skypekit_get_event(skype);\r\n\r\n    if (!event) {\r\n      sleep(5);\r\n      continue;\r\n    }\r\n\r\n    switch(event->type) {\r\n      case SKYPEKIT_EVENT_ACCOUNT_STATUS:\r\n        account_status_data = (struct SkypekitAccountStatusData*) event->data;\r\n\r\n        if ( account_status_data->status == SKYPEKIT_ACCOUNT_STATUS_LOGGED_IN) {\r\n          printf(\"Congrats! We are Logged in!\\n\");\r\n        }\r\n\r\n        if ( account_status_data->status == SKYPEKIT_ACCOUNT_STATUS_LOGGED_OUT && \r\n            account_status_data->reason != 0) {\r\n          printf(\"Login error: %d\\n\", account_status_data->reason);\r\n          terminate();\r\n        }\r\n\r\n        break;\r\n\r\n      case  SKYPEKIT_EVENT_CHAT_MESSAGE:\r\n        chat_message_data = (struct SkypekitChatMessageData*) event->data;\r\n\r\n        printf(\"Message received %p\\n\", chat_message_data);\r\n        printf(\"convo_id=%s\\n\", chat_message_data->convo_id);\r\n        printf(\"convo_guid=%s\\n\", chat_message_data->convo_guid);\r\n        printf(\"author=%s\\n\", chat_message_data->author);\r\n        printf(\"author_displayname=%s\\n\", chat_message_data->author_displayname);\r\n        printf(\"timestamp=%d\\n\", chat_message_data->timestamp);\r\n        printf(\"body_xml=%s\\n\", chat_message_data->body_xml);\r\n\r\n        if (strcmp(chat_message_data->body_xml,\"ping\") == 0) {\r\n          skypekit_chat_send_message(skype, chat_message_data->convo_id, \"pong\", 0);\r\n        }\r\n\r\n        break;\r\n\r\n      default:\r\n        printf(\"Unknown event type: %d\\n\", event->type);\r\n        break;\r\n    }\r\n\r\n    skypekit_event_free(event);\r\n  }\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\nBuild it with:\r\n\r\n    $ ./build_examples.sh\r\n\r\nRun ping_pong example:\r\n\r\n    $ ./bin/skypekit_ping_pong my.pem 127.0.0.1 8963 my_skypename my_password\r\n\r\n## Author\r\n\r\n* Andriy Yanko\r\n\r\n## Contributors\r\n\r\n* Volodymyr Bezobiuk\r\n* Alexey Vasiliev\r\n\r\n## License\r\n\r\n* Copyright (c) 2012 Railsware (www.railsware.com)\r\n* [MIT](http://www.opensource.org/licenses/MIT)","tagline":"Thread-safe C library with synchronous API using asynchronous C++ SkypeKit SDK","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}